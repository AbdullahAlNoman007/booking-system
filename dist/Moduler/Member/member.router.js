"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.memberRouter = void 0;
const express_1 = __importDefault(require("express"));
const member_controller_1 = require("./member.controller");
const validationRequest_1 = __importDefault(require("../../middleware/validationRequest"));
const member_validation_1 = require("./member.validation");
const auth_1 = __importDefault(require("../../middleware/auth"));
const userRole_1 = require("../../utility/userRole");
const router = express_1.default.Router();
router.get('/get-customer', (0, auth_1.default)(userRole_1.userRole.admin), (0, validationRequest_1.default)(member_validation_1.getValidationSchema), member_controller_1.memberController.getACustomer);
router.get('/get-customers', (0, auth_1.default)(userRole_1.userRole.admin), member_controller_1.memberController.getAllCustomer);
router.get('/get-operator', (0, auth_1.default)(userRole_1.userRole.admin), (0, validationRequest_1.default)(member_validation_1.getValidationSchema), member_controller_1.memberController.getAOperator);
router.get('/get-operators', (0, auth_1.default)(userRole_1.userRole.admin), member_controller_1.memberController.getAllOperator);
router.get('/get-operatorsbymoderator', (0, auth_1.default)(userRole_1.userRole.moderator), member_controller_1.memberController.getAllOperatorByM);
router.get('/get-moderators', (0, auth_1.default)(userRole_1.userRole.admin), member_controller_1.memberController.getAllModerator);
router.get('/get-moderator', (0, auth_1.default)(userRole_1.userRole.admin), (0, validationRequest_1.default)(member_validation_1.getValidationSchema), member_controller_1.memberController.getAModerator);
router.get('/get-driver', (0, auth_1.default)(userRole_1.userRole.admin), (0, validationRequest_1.default)(member_validation_1.getValidationSchema), member_controller_1.memberController.getADriver);
router.get('/get-drivers', (0, auth_1.default)(userRole_1.userRole.admin), member_controller_1.memberController.getAllDriver);
router.get('/get-admin', (0, auth_1.default)(userRole_1.userRole.admin), (0, validationRequest_1.default)(member_validation_1.getValidationSchema), member_controller_1.memberController.getAAdmin);
router.get('/get-admins', (0, auth_1.default)(userRole_1.userRole.admin), member_controller_1.memberController.getAllAdmin);
router.put('/update-customer/:id', (0, auth_1.default)(userRole_1.userRole.admin), (0, validationRequest_1.default)(member_validation_1.memberUpdateSchema), member_controller_1.memberController.updateCustomer);
router.put('/update-moderator/:id', (0, auth_1.default)(userRole_1.userRole.admin), (0, validationRequest_1.default)(member_validation_1.memberUpdateSchema), member_controller_1.memberController.updateModerator);
router.put('/update-operator/:id', (0, auth_1.default)(userRole_1.userRole.admin), (0, validationRequest_1.default)(member_validation_1.memberUpdateSchema), member_controller_1.memberController.updateOperator);
router.put('/update-operatorbymoderator/:id', (0, auth_1.default)(userRole_1.userRole.moderator), (0, validationRequest_1.default)(member_validation_1.memberUpdateSchema), member_controller_1.memberController.updateOperator);
router.put('/update-driver/:id', (0, auth_1.default)(userRole_1.userRole.admin), (0, validationRequest_1.default)(member_validation_1.memberUpdateSchema), member_controller_1.memberController.updateDriver);
router.put('/update-admin/:id', (0, auth_1.default)(userRole_1.userRole.admin), (0, validationRequest_1.default)(member_validation_1.memberUpdateSchema), member_controller_1.memberController.updateAdmin);
router.delete('/delete-customer/:id', (0, auth_1.default)(userRole_1.userRole.admin), member_controller_1.memberController.deleteCustomer);
router.delete('/delete-moderator/:id', (0, auth_1.default)(userRole_1.userRole.admin), member_controller_1.memberController.deleteModerator);
router.delete('/delete-operator/:id', (0, auth_1.default)(userRole_1.userRole.admin, userRole_1.userRole.moderator), member_controller_1.memberController.deleteOperator);
router.delete('/delete-driver/:id', (0, auth_1.default)(userRole_1.userRole.admin), member_controller_1.memberController.deleteDriver);
router.delete('/delete-admin/:id', (0, auth_1.default)(userRole_1.userRole.admin), member_controller_1.memberController.deleteAdmin);
exports.memberRouter = router;
